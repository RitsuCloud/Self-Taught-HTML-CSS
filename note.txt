Text element: 

<u></u> will underline text 
<strong></strong> will bold text
<span></span> is what we want if we style our own text, since we can give it class

HTML Structure:

<!DOCTYPE html> have this at the top to let browswer know use new version html
<html></html> this say there is a web page between this tag, can only have one tag
<head></head> for elements that are not meant to be visible to page 
<body></body> suppose to only contain element that was visible to page

<head></head> functions:
<title></title> change the name of the website at the tab

Hyper Link:
hreft is the website to go to, target = "_blank" is to open it in a new tabe, ONLY WORK IN <a></a>

Load CSS from another file:
<link rel="Stylesheet" href = "name of file"> Sytlesheet is for the link to know what this is for
and href just links the file. 
If the css file is in a folder, href = "name of folder/ name of file"

Search box
<input> void element, <input type = "text"> for text, or type = "checkbox" for checkbox, add placeholder="search" for words 
inside the search bar

Image
<img src="location of the img"> void element, can give img class and style it like text, but with a little
different style.

Vertical layout: 
Vertical layout is rows

Horizontal layout: 
Horizontal layout is colums

Grid Layout: 
Requires an container (and outter div)
<div style="display: grid; grid-template-columns: 100px 100px; "> 
Grid is better for maintaining alignment much better
Grid template columns creates how many div is in each rows, right now there is 2 100 px div on the columns, to put more divs
we need to add more #px at the end for it, and if we add div without addding the 100px, it will print on a new row

<div style="
      display: grid;
      grid-template-columns: 100px 1fr;
    ">
    1 fr means 1 free space, which will take over the remaining amount of space
    if 2 "1fr" it will split the remaining space betwen the two, the 1 is like a ratio,
    it can have "1fr 2fr", the first div will get 1/3 of the space, and the second div, will
    get the remaining 2/3 of the space

column-gap: 20px;  row-gap: 40px;
properties of grid we can use to have gaps between rows and columns

FlexBox:
Requires an container (and outter div) just like grid
<div style="
      display: flex;
      flex-direction: row;
    ">
this is for the outter container.
<div style="background-color: lightblue;
      flex: 2;
      ">div 2 <p>text</p></div>
flex:2 is the equivlent of 2fr
The different between grid and flexbox is that grid you have to specific column and space
in the outter container, in flexbox you can have the style in the div itself, which is more flexible

justify-content: end; is another way to line things up, start will line to left, end will line the the left, and
center will line in center, all Horizontal

align-items: end; will align items in the container vertically, start will align to top and only take the space it needs,so 
it doesnt fill the whole container, end witll align bottom and center etc.

Position html
Position static is just default, no need for this
Position fixed is like the div hovering over the page, an it will stay there
Top: 0px, is how far this element is from the top of the browser window
same with left, right, and bottom, if we set both side like right and left, the element will
stretch to meet the condition

Position absolute
It will place the element on the web page, so it move along with the page when scroll

